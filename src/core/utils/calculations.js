/*################################### KOR ################################*/

import moment from "moment";

function getTotalUsefulKernel(gk, sk_no_shell, ik_no_shell) {
    return (parseFloat(gk)) +
        (parseFloat(sk_no_shell * 0.5)) +
        (parseFloat(ik_no_shell * 0.5))
}

/*
* Real data should output a KOR around 10-99 lbs (with 2 decimals unit)
* [(Weight of good Kernel x 100%)+(Weight of Spotted Kernel x 50%)+(Weight of Immature Kernel x 50%)] x 80/454
* */
export function getKOR(gk, sk_no_shell, ik_no_shell) {
    return Number((getTotalUsefulKernel(gk, sk_no_shell, ik_no_shell) * 80 / 454).toFixed(2))
}

/*################################### Defective ################################*/
function getDefectiveWeight(sk, ik, ok, bk, vk) {
    return parseFloat(sk) +
        parseFloat(ik) +
        parseFloat(ok) +
        parseFloat(bk) +
        parseFloat(vk)
}

/*
* Defective rate (% of nuts with default- can be generated by inserting weight of nuts with default).
* Defective nut are the nuts giving " Spotted"- "Immature"- "Oily"- "Void" and "bad" kernels.
* The defective rate calculation will be the total weight weight of 6+7+8+9+10 (with shells) x 10/100.
* */
export function getDefectiveRate(sk, ik, ok, bk, vk) {
    return Number((getDefectiveWeight(sk, ik, ok, bk, vk) * 0.1).toFixed(2))
}


/*################################### Foreign Material Rate ################################*/

/*
* Foreign material rate in percentage: Weight of Foreign Material x 100 / 1000
* */
export function getForeignMaterialsRatio(fm) {
    return Number(parseFloat(fm * 0.1).toFixed(2))
}

export function calculateQapResults(qap_data) {
    // always get from local from local
    return {
        nut_count: qap_data[2].val1,
        moisture_content: qap_data[3].val1,
        foreign_mat_rate: getForeignMaterialsRatio(qap_data[4].val1),
        kor: getKOR(
            qap_data[5].val1,
            qap_data[6].val2,
            qap_data[7].val2
        ),
        defective_rate: getDefectiveRate(
            qap_data[6].val1,
            qap_data[7].val1,
            qap_data[8].val1,
            qap_data[9].val1,
            qap_data[10].val1,
        )
    }
}

export function getQapResults(source, data) {

    const qap_data = calculateQapResults(source, data)

    return [
        {
            name: 'Nut Count',
            value: qap_data.nut_count,
            metrics: 'Nuts'
        },
        {
            name: 'Moisture Content',
            value: qap_data.moisture_content,
            metrics: '%'
        },
        {
            name: 'Foreign Material',
            value: qap_data.foreign_mat_rate,
            metrics: '%'
        },
        {
            name: 'KOR',
            value: qap_data.kor,
            metrics: 'lbs'
        },
        {
            name: 'Defective Rate',
            value: qap_data.defective_rate,
            metrics: '%'
        },
        {
            name: 'Date Processed',
            value: source === 2 ? qap_data.created_at.toDate().toLocaleDateString() : moment().format('D/MM/YYYY'),
            metrics: ''
        },
    ]
}
